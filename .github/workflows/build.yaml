name: Build
on:
  push: {}
  pull_request: {}
  schedule:
    - cron: "0 5 * * MON"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.run_id }}-build
  cancel-in-progress: true

jobs:
  ubuntu:
    name: "Ubuntu"
    needs: clang-format
    strategy:
      matrix:
        os: [ubuntu-22.04]
        compiler: [gcc, clang]
        build_type: ["", Release, Debug, RelWithDebInfo]
        exclude:
          - compiler: clang
            build_type: RelWithDebInfo
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GCC
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          sudo apt-get install g++
      - name: Install clang
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          sudo apt-get install clang
          export CC=$(which clang)
          export CXX=$(which clang++)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            cmake \
            ninja-build \
            python3 \
            python3-pip \
            gettext \
            qtbase5-dev \
            libqt5svg5-dev \
            libkf5archive-dev \
            liblua5.3-dev \
            libsqlite3-dev \
            libsdl2-mixer-dev \
            python3-sphinx
          pip install -r docs/requirements.txt
      - name: Configure
        run: |
          cmake . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=/usr
      - name: Build
        run: |
          cmake --build build
      - name: Test
        run: |
          cmake --build build --target test
      - name: Debug
        if: failure()
        run: |
          cat build/Testing/Temporary/LastTest.log
      - name: Install
        run: |
          DESTDIR=$PWD/build/install cmake --build build --target install
      - name: Package
        run: |
          cmake --build build --target package
      - name: Upload package
        uses: softprops/action-gh-release@v2
        if: |
          startsWith(github.ref, 'refs/tags/')
            && matrix.compiler == 'gcc'
            && matrix.build_type == 'Release'
        with:
          files: |
            build/Linux-x86_64/freeciv21_*_amd64.deb
            build/Linux-x86_64/freeciv21_*_amd64.deb.sha256

  flagstest:
    name: "Additional compile flags in Ubuntu"
    needs: clang-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GCC
        run: |
          sudo apt-get install g++
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            cmake \
            ninja-build \
            python3 \
            gettext \
            qtbase5-dev \
            libqt5svg5-dev \
            libkf5archive-dev \
            liblua5.3-dev \
            libsqlite3-dev \
            libsdl2-mixer-dev
      - name: Configure
        run: |
            cmake . -B build -G "Ninja Multi-Config" --preset "DistroRelease"
      - name: Build
        run: |
          cmake --build build
      - name: Test
        run: |
          cmake --build build --target test

  wasm:
    name: "WebAssembly"
    runs-on: ubuntu-24.04
    # we only want the wasm build
    # if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    env:
      QT_VERSION: v6.4.3
    steps:
      - uses: actions/checkout@v4
      - name: Cache Qt build
        id: qtcache
        uses: actions/cache@v4
        with:
          path: ~/qt
          key: qt-wasm-${{ env.QT_VERSION }}-svg-socket-v2
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install \
            cmake \
            ninja-build \
            clang \
            python3 \
            gettext \
            qt6-base-dev \
            qmake6
      - uses: actions/checkout@v4
        name: Checkout emsdk
        with:
          repository: emscripten-core/emsdk
          path: emsdk
      - name: Install emsdk
        run: |
          cd emsdk
          ./emsdk install 3.0.0
          ./emsdk activate 3.0.0
          touch prime.c
          source emsdk_env.sh
          emcc -sUSE_ZLIB=1 -sUSE_SDL=2 -sUSE_SDL_MIXER=2 prime.c -o prime.o
          ln -s libSDL2_mixer_ogg.a upstream/emscripten/cache/sysroot/lib/wasm32-emscripten/libSDL2_mixer.a
      - name: Install lua
        run: |
          source emsdk/emsdk_env.sh
          wget https://www.lua.org/ftp/lua-5.4.3.tar.gz
          tar xf lua-5.4.3.tar.gz
          cp dist/wasm/lua.CMakeLists.txt lua-5.4.3/CMakeLists.txt
          cd lua-5.4.3
          emcmake cmake .
          emmake make install
      - uses: actions/checkout@v4
        if: steps.qtcache.outputs.cache-hit != 'true'
        name: Checkout qtbase
        with:
          repository: qt/qtbase
          ref: ${{ env.QT_VERSION }}
          path: qtbase
      - name: Build Qt
        if: steps.qtcache.outputs.cache-hit != 'true'
        run: |
          source emsdk/emsdk_env.sh
          cd qtbase
          git config --global user.email "root@example.com"
          git config --global user.name "root"
          export QT_HOST_PATH=/usr/lib/qt6
          export CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6HostInfo
          export Qt6HostInfo_DIR=/usr/lib/x86_64-linux-gnu/cmake/Qt6HostInfo/
          ./configure -xplatform wasm-emscripten -opensource -confirm-license -prefix ~/qt -nomake examples
          make install
      - uses: actions/checkout@v4
        if: steps.qtcache.outputs.cache-hit != 'true'
        name: Checkout qtsvg
        with:
          repository: qt/qtsvg
          ref: ${{ env.QT_VERSION }}
          path: qtsvg
      - name: Build QtSvg
        if: steps.qtcache.outputs.cache-hit != 'true'
        run: |
          source emsdk/emsdk_env.sh
          cd qtsvg
          ~/qt/bin/qmake
          make install
      - uses: actions/checkout@v4
        name: Checkout zstd
        with:
          repository: facebook/zstd
          ref: v1.5.0
          path: zstd
      - name: Build zstd
        run: |
          source emsdk/emsdk_env.sh
          cd zstd
          mkdir bld
          emcmake cmake build/cmake -DZSTD_BUILD_PROGRAMS=0 -DZSTD_BUILD_SHARED=0
          emmake make install
      - uses: actions/checkout@v4
        name: Checkout extra-cmake-modules
        with:
          repository: KDE/extra-cmake-modules
          ref: v5.96.0
          path: ecm
      - name: Install ecm
        run: |
          cd ecm
          cmake .
          sudo make install
      - uses: actions/checkout@v4
        name: Checkout karchive
        with:
          repository: KDE/karchive
          ref: v5.96.0
          path: karchive
      - name: Install karchive
        run: |
          source emsdk/emsdk_env.sh
          cd karchive
          git apply ../dist/wasm/karchive.diff
          emcmake cmake . \
            -DECM_DIR=/usr/local/share/ECM/cmake -DBUILD_TESTING=0 \
            -DQt5Core_DIR=$HOME/qt/lib/cmake/Qt5Core \
            -DKF_IGNORE_PLATFORM_CHECK=1 \
            -DCMAKE_INSTALL_PREFIX=../emsdk/upstream/emscripten/cache/sysroot
          emmake make install
      - name: Build Freeciv
        run: |
          source emsdk/emsdk_env.sh
          ls $HOME/qt/lib/cmake/Qt5
          emcmake cmake . \
            -DCMAKE_BUILD_TYPE=Release \
            -DQt5_DIR=$HOME/qt/lib/cmake/Qt5 \
            -DQt5Svg_DIR=$HOME/qt/lib/cmake/Qt5Svg \
            -DQt5Gui_DIR=$HOME/qt/lib/cmake/Qt5Gui \
            -DQt5Core_DIR=$HOME/qt/lib/cmake/Qt5Core \
            -DQt5Network_DIR=$HOME/qt/lib/cmake/Qt5Network \
            -DFREECIV_ENABLE_SERVER=0 \
            -DLUA_MATH_LIBRARY=emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten/libc.a \
            -DQt5Widgets_DIR=$HOME/qt/lib/cmake/Qt5Widgets \
            -DQt5EventDispatcherSupport_DIR=$HOME/qt/lib/cmake/Qt5EventDispatcherSupport \
            -DQt5FontDatabaseSupport_DIR=$HOME/qt/lib/cmake/Qt5FontDatabaseSupport \
            -DQt5EglSupport_DIR=$HOME/qt/lib/cmake/Qt5EglSupport \
            -DFREECIV_ENABLE_FCMP_CLI=0 -DFREECIV_ENABLE_FCMP_QT=0 \
            -DFREECIV_BUILD_LIBSERVER=0 -DFREECIV_ENABLE_RULEUP=0 \
            -DFREECIV_ENABLE_RULEDIT=0 -DFREECIV_ENABLE_CIVMANUAL=0 \
            -DKF5Archive_DIR=../emsdk/upstream/emscripten/cache/sysroot/lib/cmake \
            -DCAN_UNWIND_STACK=0
          VERBOSE=1 emmake make
      - name: Debug
        if: failure()
        run: |
          cat common/networking/CMakeFiles/networking.dir/includes_CXX.rsp
          cat CMakeCache.txt
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cmakecache
          path: CMakeCache.txt
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-client
          path: freeciv21-client.*

  clang-format:
    name: clang-format Code Formatter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Run clang-format style check for C/C++
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: '11'
        exclude-regex: 'dependencies'
